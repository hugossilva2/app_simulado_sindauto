
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Questao
 * 
 */
export type Questao = $Result.DefaultSelection<Prisma.$QuestaoPayload>
/**
 * Model Opcao
 * 
 */
export type Opcao = $Result.DefaultSelection<Prisma.$OpcaoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Questaos
 * const questaos = await prisma.questao.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Questaos
   * const questaos = await prisma.questao.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.questao`: Exposes CRUD operations for the **Questao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questaos
    * const questaos = await prisma.questao.findMany()
    * ```
    */
  get questao(): Prisma.QuestaoDelegate<ExtArgs>;

  /**
   * `prisma.opcao`: Exposes CRUD operations for the **Opcao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Opcaos
    * const opcaos = await prisma.opcao.findMany()
    * ```
    */
  get opcao(): Prisma.OpcaoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.0
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Questao: 'Questao',
    Opcao: 'Opcao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'questao' | 'opcao'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Questao: {
        payload: Prisma.$QuestaoPayload<ExtArgs>
        fields: Prisma.QuestaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          findFirst: {
            args: Prisma.QuestaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          findMany: {
            args: Prisma.QuestaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>[]
          }
          create: {
            args: Prisma.QuestaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          createMany: {
            args: Prisma.QuestaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.QuestaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          update: {
            args: Prisma.QuestaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          deleteMany: {
            args: Prisma.QuestaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QuestaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QuestaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QuestaoPayload>
          }
          aggregate: {
            args: Prisma.QuestaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQuestao>
          }
          groupBy: {
            args: Prisma.QuestaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QuestaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestaoCountArgs<ExtArgs>,
            result: $Utils.Optional<QuestaoCountAggregateOutputType> | number
          }
        }
      }
      Opcao: {
        payload: Prisma.$OpcaoPayload<ExtArgs>
        fields: Prisma.OpcaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpcaoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OpcaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpcaoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OpcaoPayload>
          }
          findFirst: {
            args: Prisma.OpcaoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OpcaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpcaoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OpcaoPayload>
          }
          findMany: {
            args: Prisma.OpcaoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OpcaoPayload>[]
          }
          create: {
            args: Prisma.OpcaoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OpcaoPayload>
          }
          createMany: {
            args: Prisma.OpcaoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OpcaoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OpcaoPayload>
          }
          update: {
            args: Prisma.OpcaoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OpcaoPayload>
          }
          deleteMany: {
            args: Prisma.OpcaoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OpcaoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OpcaoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OpcaoPayload>
          }
          aggregate: {
            args: Prisma.OpcaoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOpcao>
          }
          groupBy: {
            args: Prisma.OpcaoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OpcaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpcaoCountArgs<ExtArgs>,
            result: $Utils.Optional<OpcaoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type QuestaoCountOutputType
   */

  export type QuestaoCountOutputType = {
    opcoes: number
  }

  export type QuestaoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    opcoes?: boolean | QuestaoCountOutputTypeCountOpcoesArgs
  }

  // Custom InputTypes

  /**
   * QuestaoCountOutputType without action
   */
  export type QuestaoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestaoCountOutputType
     */
    select?: QuestaoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * QuestaoCountOutputType without action
   */
  export type QuestaoCountOutputTypeCountOpcoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpcaoWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Questao
   */

  export type AggregateQuestao = {
    _count: QuestaoCountAggregateOutputType | null
    _avg: QuestaoAvgAggregateOutputType | null
    _sum: QuestaoSumAggregateOutputType | null
    _min: QuestaoMinAggregateOutputType | null
    _max: QuestaoMaxAggregateOutputType | null
  }

  export type QuestaoAvgAggregateOutputType = {
    id: number | null
  }

  export type QuestaoSumAggregateOutputType = {
    id: number | null
  }

  export type QuestaoMinAggregateOutputType = {
    id: number | null
    texto: string | null
  }

  export type QuestaoMaxAggregateOutputType = {
    id: number | null
    texto: string | null
  }

  export type QuestaoCountAggregateOutputType = {
    id: number
    texto: number
    _all: number
  }


  export type QuestaoAvgAggregateInputType = {
    id?: true
  }

  export type QuestaoSumAggregateInputType = {
    id?: true
  }

  export type QuestaoMinAggregateInputType = {
    id?: true
    texto?: true
  }

  export type QuestaoMaxAggregateInputType = {
    id?: true
    texto?: true
  }

  export type QuestaoCountAggregateInputType = {
    id?: true
    texto?: true
    _all?: true
  }

  export type QuestaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questao to aggregate.
     */
    where?: QuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questaos to fetch.
     */
    orderBy?: QuestaoOrderByWithRelationInput | QuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questaos
    **/
    _count?: true | QuestaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestaoMaxAggregateInputType
  }

  export type GetQuestaoAggregateType<T extends QuestaoAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestao[P]>
      : GetScalarType<T[P], AggregateQuestao[P]>
  }




  export type QuestaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestaoWhereInput
    orderBy?: QuestaoOrderByWithAggregationInput | QuestaoOrderByWithAggregationInput[]
    by: QuestaoScalarFieldEnum[] | QuestaoScalarFieldEnum
    having?: QuestaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestaoCountAggregateInputType | true
    _avg?: QuestaoAvgAggregateInputType
    _sum?: QuestaoSumAggregateInputType
    _min?: QuestaoMinAggregateInputType
    _max?: QuestaoMaxAggregateInputType
  }

  export type QuestaoGroupByOutputType = {
    id: number
    texto: string
    _count: QuestaoCountAggregateOutputType | null
    _avg: QuestaoAvgAggregateOutputType | null
    _sum: QuestaoSumAggregateOutputType | null
    _min: QuestaoMinAggregateOutputType | null
    _max: QuestaoMaxAggregateOutputType | null
  }

  type GetQuestaoGroupByPayload<T extends QuestaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestaoGroupByOutputType[P]>
            : GetScalarType<T[P], QuestaoGroupByOutputType[P]>
        }
      >
    >


  export type QuestaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    texto?: boolean
    opcoes?: boolean | Questao$opcoesArgs<ExtArgs>
    _count?: boolean | QuestaoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questao"]>

  export type QuestaoSelectScalar = {
    id?: boolean
    texto?: boolean
  }

  export type QuestaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    opcoes?: boolean | Questao$opcoesArgs<ExtArgs>
    _count?: boolean | QuestaoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $QuestaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Questao"
    objects: {
      opcoes: Prisma.$OpcaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      texto: string
    }, ExtArgs["result"]["questao"]>
    composites: {}
  }


  type QuestaoGetPayload<S extends boolean | null | undefined | QuestaoDefaultArgs> = $Result.GetResult<Prisma.$QuestaoPayload, S>

  type QuestaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestaoCountAggregateInputType | true
    }

  export interface QuestaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Questao'], meta: { name: 'Questao' } }
    /**
     * Find zero or one Questao that matches the filter.
     * @param {QuestaoFindUniqueArgs} args - Arguments to find a Questao
     * @example
     * // Get one Questao
     * const questao = await prisma.questao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuestaoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, QuestaoFindUniqueArgs<ExtArgs>>
    ): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Questao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QuestaoFindUniqueOrThrowArgs} args - Arguments to find a Questao
     * @example
     * // Get one Questao
     * const questao = await prisma.questao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QuestaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Questao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoFindFirstArgs} args - Arguments to find a Questao
     * @example
     * // Get one Questao
     * const questao = await prisma.questao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuestaoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestaoFindFirstArgs<ExtArgs>>
    ): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Questao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoFindFirstOrThrowArgs} args - Arguments to find a Questao
     * @example
     * // Get one Questao
     * const questao = await prisma.questao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QuestaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Questaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questaos
     * const questaos = await prisma.questao.findMany()
     * 
     * // Get first 10 Questaos
     * const questaos = await prisma.questao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questaoWithIdOnly = await prisma.questao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuestaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Questao.
     * @param {QuestaoCreateArgs} args - Arguments to create a Questao.
     * @example
     * // Create one Questao
     * const Questao = await prisma.questao.create({
     *   data: {
     *     // ... data to create a Questao
     *   }
     * })
     * 
    **/
    create<T extends QuestaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestaoCreateArgs<ExtArgs>>
    ): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Questaos.
     *     @param {QuestaoCreateManyArgs} args - Arguments to create many Questaos.
     *     @example
     *     // Create many Questaos
     *     const questao = await prisma.questao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QuestaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Questao.
     * @param {QuestaoDeleteArgs} args - Arguments to delete one Questao.
     * @example
     * // Delete one Questao
     * const Questao = await prisma.questao.delete({
     *   where: {
     *     // ... filter to delete one Questao
     *   }
     * })
     * 
    **/
    delete<T extends QuestaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QuestaoDeleteArgs<ExtArgs>>
    ): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Questao.
     * @param {QuestaoUpdateArgs} args - Arguments to update one Questao.
     * @example
     * // Update one Questao
     * const questao = await prisma.questao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuestaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QuestaoUpdateArgs<ExtArgs>>
    ): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Questaos.
     * @param {QuestaoDeleteManyArgs} args - Arguments to filter Questaos to delete.
     * @example
     * // Delete a few Questaos
     * const { count } = await prisma.questao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuestaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QuestaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questaos
     * const questao = await prisma.questao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuestaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QuestaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Questao.
     * @param {QuestaoUpsertArgs} args - Arguments to update or create a Questao.
     * @example
     * // Update or create a Questao
     * const questao = await prisma.questao.upsert({
     *   create: {
     *     // ... data to create a Questao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Questao we want to update
     *   }
     * })
    **/
    upsert<T extends QuestaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QuestaoUpsertArgs<ExtArgs>>
    ): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Questaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoCountArgs} args - Arguments to filter Questaos to count.
     * @example
     * // Count the number of Questaos
     * const count = await prisma.questao.count({
     *   where: {
     *     // ... the filter for the Questaos we want to count
     *   }
     * })
    **/
    count<T extends QuestaoCountArgs>(
      args?: Subset<T, QuestaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Questao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestaoAggregateArgs>(args: Subset<T, QuestaoAggregateArgs>): Prisma.PrismaPromise<GetQuestaoAggregateType<T>>

    /**
     * Group by Questao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestaoGroupByArgs['orderBy'] }
        : { orderBy?: QuestaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Questao model
   */
  readonly fields: QuestaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Questao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    opcoes<T extends Questao$opcoesArgs<ExtArgs> = {}>(args?: Subset<T, Questao$opcoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Questao model
   */ 
  interface QuestaoFieldRefs {
    readonly id: FieldRef<"Questao", 'Int'>
    readonly texto: FieldRef<"Questao", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Questao findUnique
   */
  export type QuestaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questao to fetch.
     */
    where: QuestaoWhereUniqueInput
  }


  /**
   * Questao findUniqueOrThrow
   */
  export type QuestaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questao to fetch.
     */
    where: QuestaoWhereUniqueInput
  }


  /**
   * Questao findFirst
   */
  export type QuestaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questao to fetch.
     */
    where?: QuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questaos to fetch.
     */
    orderBy?: QuestaoOrderByWithRelationInput | QuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questaos.
     */
    cursor?: QuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questaos.
     */
    distinct?: QuestaoScalarFieldEnum | QuestaoScalarFieldEnum[]
  }


  /**
   * Questao findFirstOrThrow
   */
  export type QuestaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questao to fetch.
     */
    where?: QuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questaos to fetch.
     */
    orderBy?: QuestaoOrderByWithRelationInput | QuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questaos.
     */
    cursor?: QuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questaos.
     */
    distinct?: QuestaoScalarFieldEnum | QuestaoScalarFieldEnum[]
  }


  /**
   * Questao findMany
   */
  export type QuestaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter, which Questaos to fetch.
     */
    where?: QuestaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questaos to fetch.
     */
    orderBy?: QuestaoOrderByWithRelationInput | QuestaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questaos.
     */
    cursor?: QuestaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questaos.
     */
    skip?: number
    distinct?: QuestaoScalarFieldEnum | QuestaoScalarFieldEnum[]
  }


  /**
   * Questao create
   */
  export type QuestaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Questao.
     */
    data: XOR<QuestaoCreateInput, QuestaoUncheckedCreateInput>
  }


  /**
   * Questao createMany
   */
  export type QuestaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questaos.
     */
    data: QuestaoCreateManyInput | QuestaoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Questao update
   */
  export type QuestaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Questao.
     */
    data: XOR<QuestaoUpdateInput, QuestaoUncheckedUpdateInput>
    /**
     * Choose, which Questao to update.
     */
    where: QuestaoWhereUniqueInput
  }


  /**
   * Questao updateMany
   */
  export type QuestaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questaos.
     */
    data: XOR<QuestaoUpdateManyMutationInput, QuestaoUncheckedUpdateManyInput>
    /**
     * Filter which Questaos to update
     */
    where?: QuestaoWhereInput
  }


  /**
   * Questao upsert
   */
  export type QuestaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Questao to update in case it exists.
     */
    where: QuestaoWhereUniqueInput
    /**
     * In case the Questao found by the `where` argument doesn't exist, create a new Questao with this data.
     */
    create: XOR<QuestaoCreateInput, QuestaoUncheckedCreateInput>
    /**
     * In case the Questao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestaoUpdateInput, QuestaoUncheckedUpdateInput>
  }


  /**
   * Questao delete
   */
  export type QuestaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
    /**
     * Filter which Questao to delete.
     */
    where: QuestaoWhereUniqueInput
  }


  /**
   * Questao deleteMany
   */
  export type QuestaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questaos to delete
     */
    where?: QuestaoWhereInput
  }


  /**
   * Questao.opcoes
   */
  export type Questao$opcoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    where?: OpcaoWhereInput
    orderBy?: OpcaoOrderByWithRelationInput | OpcaoOrderByWithRelationInput[]
    cursor?: OpcaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OpcaoScalarFieldEnum | OpcaoScalarFieldEnum[]
  }


  /**
   * Questao without action
   */
  export type QuestaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Questao
     */
    select?: QuestaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QuestaoInclude<ExtArgs> | null
  }



  /**
   * Model Opcao
   */

  export type AggregateOpcao = {
    _count: OpcaoCountAggregateOutputType | null
    _avg: OpcaoAvgAggregateOutputType | null
    _sum: OpcaoSumAggregateOutputType | null
    _min: OpcaoMinAggregateOutputType | null
    _max: OpcaoMaxAggregateOutputType | null
  }

  export type OpcaoAvgAggregateOutputType = {
    id: number | null
    questaoId: number | null
  }

  export type OpcaoSumAggregateOutputType = {
    id: number | null
    questaoId: number | null
  }

  export type OpcaoMinAggregateOutputType = {
    id: number | null
    texto: string | null
    correta: boolean | null
    questaoId: number | null
  }

  export type OpcaoMaxAggregateOutputType = {
    id: number | null
    texto: string | null
    correta: boolean | null
    questaoId: number | null
  }

  export type OpcaoCountAggregateOutputType = {
    id: number
    texto: number
    correta: number
    questaoId: number
    _all: number
  }


  export type OpcaoAvgAggregateInputType = {
    id?: true
    questaoId?: true
  }

  export type OpcaoSumAggregateInputType = {
    id?: true
    questaoId?: true
  }

  export type OpcaoMinAggregateInputType = {
    id?: true
    texto?: true
    correta?: true
    questaoId?: true
  }

  export type OpcaoMaxAggregateInputType = {
    id?: true
    texto?: true
    correta?: true
    questaoId?: true
  }

  export type OpcaoCountAggregateInputType = {
    id?: true
    texto?: true
    correta?: true
    questaoId?: true
    _all?: true
  }

  export type OpcaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Opcao to aggregate.
     */
    where?: OpcaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opcaos to fetch.
     */
    orderBy?: OpcaoOrderByWithRelationInput | OpcaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpcaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opcaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opcaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Opcaos
    **/
    _count?: true | OpcaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OpcaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OpcaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpcaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpcaoMaxAggregateInputType
  }

  export type GetOpcaoAggregateType<T extends OpcaoAggregateArgs> = {
        [P in keyof T & keyof AggregateOpcao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpcao[P]>
      : GetScalarType<T[P], AggregateOpcao[P]>
  }




  export type OpcaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpcaoWhereInput
    orderBy?: OpcaoOrderByWithAggregationInput | OpcaoOrderByWithAggregationInput[]
    by: OpcaoScalarFieldEnum[] | OpcaoScalarFieldEnum
    having?: OpcaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpcaoCountAggregateInputType | true
    _avg?: OpcaoAvgAggregateInputType
    _sum?: OpcaoSumAggregateInputType
    _min?: OpcaoMinAggregateInputType
    _max?: OpcaoMaxAggregateInputType
  }

  export type OpcaoGroupByOutputType = {
    id: number
    texto: string
    correta: boolean
    questaoId: number
    _count: OpcaoCountAggregateOutputType | null
    _avg: OpcaoAvgAggregateOutputType | null
    _sum: OpcaoSumAggregateOutputType | null
    _min: OpcaoMinAggregateOutputType | null
    _max: OpcaoMaxAggregateOutputType | null
  }

  type GetOpcaoGroupByPayload<T extends OpcaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpcaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpcaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpcaoGroupByOutputType[P]>
            : GetScalarType<T[P], OpcaoGroupByOutputType[P]>
        }
      >
    >


  export type OpcaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    texto?: boolean
    correta?: boolean
    questaoId?: boolean
    questao?: boolean | QuestaoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["opcao"]>

  export type OpcaoSelectScalar = {
    id?: boolean
    texto?: boolean
    correta?: boolean
    questaoId?: boolean
  }

  export type OpcaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questao?: boolean | QuestaoDefaultArgs<ExtArgs>
  }


  export type $OpcaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Opcao"
    objects: {
      questao: Prisma.$QuestaoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      texto: string
      correta: boolean
      questaoId: number
    }, ExtArgs["result"]["opcao"]>
    composites: {}
  }


  type OpcaoGetPayload<S extends boolean | null | undefined | OpcaoDefaultArgs> = $Result.GetResult<Prisma.$OpcaoPayload, S>

  type OpcaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OpcaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OpcaoCountAggregateInputType | true
    }

  export interface OpcaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Opcao'], meta: { name: 'Opcao' } }
    /**
     * Find zero or one Opcao that matches the filter.
     * @param {OpcaoFindUniqueArgs} args - Arguments to find a Opcao
     * @example
     * // Get one Opcao
     * const opcao = await prisma.opcao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OpcaoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OpcaoFindUniqueArgs<ExtArgs>>
    ): Prisma__OpcaoClient<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Opcao that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OpcaoFindUniqueOrThrowArgs} args - Arguments to find a Opcao
     * @example
     * // Get one Opcao
     * const opcao = await prisma.opcao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OpcaoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OpcaoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OpcaoClient<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Opcao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcaoFindFirstArgs} args - Arguments to find a Opcao
     * @example
     * // Get one Opcao
     * const opcao = await prisma.opcao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OpcaoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OpcaoFindFirstArgs<ExtArgs>>
    ): Prisma__OpcaoClient<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Opcao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcaoFindFirstOrThrowArgs} args - Arguments to find a Opcao
     * @example
     * // Get one Opcao
     * const opcao = await prisma.opcao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OpcaoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OpcaoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OpcaoClient<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Opcaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Opcaos
     * const opcaos = await prisma.opcao.findMany()
     * 
     * // Get first 10 Opcaos
     * const opcaos = await prisma.opcao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const opcaoWithIdOnly = await prisma.opcao.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OpcaoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OpcaoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Opcao.
     * @param {OpcaoCreateArgs} args - Arguments to create a Opcao.
     * @example
     * // Create one Opcao
     * const Opcao = await prisma.opcao.create({
     *   data: {
     *     // ... data to create a Opcao
     *   }
     * })
     * 
    **/
    create<T extends OpcaoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OpcaoCreateArgs<ExtArgs>>
    ): Prisma__OpcaoClient<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Opcaos.
     *     @param {OpcaoCreateManyArgs} args - Arguments to create many Opcaos.
     *     @example
     *     // Create many Opcaos
     *     const opcao = await prisma.opcao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OpcaoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OpcaoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Opcao.
     * @param {OpcaoDeleteArgs} args - Arguments to delete one Opcao.
     * @example
     * // Delete one Opcao
     * const Opcao = await prisma.opcao.delete({
     *   where: {
     *     // ... filter to delete one Opcao
     *   }
     * })
     * 
    **/
    delete<T extends OpcaoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OpcaoDeleteArgs<ExtArgs>>
    ): Prisma__OpcaoClient<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Opcao.
     * @param {OpcaoUpdateArgs} args - Arguments to update one Opcao.
     * @example
     * // Update one Opcao
     * const opcao = await prisma.opcao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OpcaoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OpcaoUpdateArgs<ExtArgs>>
    ): Prisma__OpcaoClient<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Opcaos.
     * @param {OpcaoDeleteManyArgs} args - Arguments to filter Opcaos to delete.
     * @example
     * // Delete a few Opcaos
     * const { count } = await prisma.opcao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OpcaoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OpcaoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Opcaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Opcaos
     * const opcao = await prisma.opcao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OpcaoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OpcaoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Opcao.
     * @param {OpcaoUpsertArgs} args - Arguments to update or create a Opcao.
     * @example
     * // Update or create a Opcao
     * const opcao = await prisma.opcao.upsert({
     *   create: {
     *     // ... data to create a Opcao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Opcao we want to update
     *   }
     * })
    **/
    upsert<T extends OpcaoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OpcaoUpsertArgs<ExtArgs>>
    ): Prisma__OpcaoClient<$Result.GetResult<Prisma.$OpcaoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Opcaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcaoCountArgs} args - Arguments to filter Opcaos to count.
     * @example
     * // Count the number of Opcaos
     * const count = await prisma.opcao.count({
     *   where: {
     *     // ... the filter for the Opcaos we want to count
     *   }
     * })
    **/
    count<T extends OpcaoCountArgs>(
      args?: Subset<T, OpcaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpcaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Opcao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpcaoAggregateArgs>(args: Subset<T, OpcaoAggregateArgs>): Prisma.PrismaPromise<GetOpcaoAggregateType<T>>

    /**
     * Group by Opcao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpcaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpcaoGroupByArgs['orderBy'] }
        : { orderBy?: OpcaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpcaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpcaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Opcao model
   */
  readonly fields: OpcaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Opcao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpcaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    questao<T extends QuestaoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestaoDefaultArgs<ExtArgs>>): Prisma__QuestaoClient<$Result.GetResult<Prisma.$QuestaoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Opcao model
   */ 
  interface OpcaoFieldRefs {
    readonly id: FieldRef<"Opcao", 'Int'>
    readonly texto: FieldRef<"Opcao", 'String'>
    readonly correta: FieldRef<"Opcao", 'Boolean'>
    readonly questaoId: FieldRef<"Opcao", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Opcao findUnique
   */
  export type OpcaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    /**
     * Filter, which Opcao to fetch.
     */
    where: OpcaoWhereUniqueInput
  }


  /**
   * Opcao findUniqueOrThrow
   */
  export type OpcaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    /**
     * Filter, which Opcao to fetch.
     */
    where: OpcaoWhereUniqueInput
  }


  /**
   * Opcao findFirst
   */
  export type OpcaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    /**
     * Filter, which Opcao to fetch.
     */
    where?: OpcaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opcaos to fetch.
     */
    orderBy?: OpcaoOrderByWithRelationInput | OpcaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Opcaos.
     */
    cursor?: OpcaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opcaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opcaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Opcaos.
     */
    distinct?: OpcaoScalarFieldEnum | OpcaoScalarFieldEnum[]
  }


  /**
   * Opcao findFirstOrThrow
   */
  export type OpcaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    /**
     * Filter, which Opcao to fetch.
     */
    where?: OpcaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opcaos to fetch.
     */
    orderBy?: OpcaoOrderByWithRelationInput | OpcaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Opcaos.
     */
    cursor?: OpcaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opcaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opcaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Opcaos.
     */
    distinct?: OpcaoScalarFieldEnum | OpcaoScalarFieldEnum[]
  }


  /**
   * Opcao findMany
   */
  export type OpcaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    /**
     * Filter, which Opcaos to fetch.
     */
    where?: OpcaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Opcaos to fetch.
     */
    orderBy?: OpcaoOrderByWithRelationInput | OpcaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Opcaos.
     */
    cursor?: OpcaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Opcaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Opcaos.
     */
    skip?: number
    distinct?: OpcaoScalarFieldEnum | OpcaoScalarFieldEnum[]
  }


  /**
   * Opcao create
   */
  export type OpcaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Opcao.
     */
    data: XOR<OpcaoCreateInput, OpcaoUncheckedCreateInput>
  }


  /**
   * Opcao createMany
   */
  export type OpcaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Opcaos.
     */
    data: OpcaoCreateManyInput | OpcaoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Opcao update
   */
  export type OpcaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Opcao.
     */
    data: XOR<OpcaoUpdateInput, OpcaoUncheckedUpdateInput>
    /**
     * Choose, which Opcao to update.
     */
    where: OpcaoWhereUniqueInput
  }


  /**
   * Opcao updateMany
   */
  export type OpcaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Opcaos.
     */
    data: XOR<OpcaoUpdateManyMutationInput, OpcaoUncheckedUpdateManyInput>
    /**
     * Filter which Opcaos to update
     */
    where?: OpcaoWhereInput
  }


  /**
   * Opcao upsert
   */
  export type OpcaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Opcao to update in case it exists.
     */
    where: OpcaoWhereUniqueInput
    /**
     * In case the Opcao found by the `where` argument doesn't exist, create a new Opcao with this data.
     */
    create: XOR<OpcaoCreateInput, OpcaoUncheckedCreateInput>
    /**
     * In case the Opcao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpcaoUpdateInput, OpcaoUncheckedUpdateInput>
  }


  /**
   * Opcao delete
   */
  export type OpcaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
    /**
     * Filter which Opcao to delete.
     */
    where: OpcaoWhereUniqueInput
  }


  /**
   * Opcao deleteMany
   */
  export type OpcaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Opcaos to delete
     */
    where?: OpcaoWhereInput
  }


  /**
   * Opcao without action
   */
  export type OpcaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Opcao
     */
    select?: OpcaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OpcaoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const QuestaoScalarFieldEnum: {
    id: 'id',
    texto: 'texto'
  };

  export type QuestaoScalarFieldEnum = (typeof QuestaoScalarFieldEnum)[keyof typeof QuestaoScalarFieldEnum]


  export const OpcaoScalarFieldEnum: {
    id: 'id',
    texto: 'texto',
    correta: 'correta',
    questaoId: 'questaoId'
  };

  export type OpcaoScalarFieldEnum = (typeof OpcaoScalarFieldEnum)[keyof typeof OpcaoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type QuestaoWhereInput = {
    AND?: QuestaoWhereInput | QuestaoWhereInput[]
    OR?: QuestaoWhereInput[]
    NOT?: QuestaoWhereInput | QuestaoWhereInput[]
    id?: IntFilter<"Questao"> | number
    texto?: StringFilter<"Questao"> | string
    opcoes?: OpcaoListRelationFilter
  }

  export type QuestaoOrderByWithRelationInput = {
    id?: SortOrder
    texto?: SortOrder
    opcoes?: OpcaoOrderByRelationAggregateInput
  }

  export type QuestaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestaoWhereInput | QuestaoWhereInput[]
    OR?: QuestaoWhereInput[]
    NOT?: QuestaoWhereInput | QuestaoWhereInput[]
    texto?: StringFilter<"Questao"> | string
    opcoes?: OpcaoListRelationFilter
  }, "id">

  export type QuestaoOrderByWithAggregationInput = {
    id?: SortOrder
    texto?: SortOrder
    _count?: QuestaoCountOrderByAggregateInput
    _avg?: QuestaoAvgOrderByAggregateInput
    _max?: QuestaoMaxOrderByAggregateInput
    _min?: QuestaoMinOrderByAggregateInput
    _sum?: QuestaoSumOrderByAggregateInput
  }

  export type QuestaoScalarWhereWithAggregatesInput = {
    AND?: QuestaoScalarWhereWithAggregatesInput | QuestaoScalarWhereWithAggregatesInput[]
    OR?: QuestaoScalarWhereWithAggregatesInput[]
    NOT?: QuestaoScalarWhereWithAggregatesInput | QuestaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Questao"> | number
    texto?: StringWithAggregatesFilter<"Questao"> | string
  }

  export type OpcaoWhereInput = {
    AND?: OpcaoWhereInput | OpcaoWhereInput[]
    OR?: OpcaoWhereInput[]
    NOT?: OpcaoWhereInput | OpcaoWhereInput[]
    id?: IntFilter<"Opcao"> | number
    texto?: StringFilter<"Opcao"> | string
    correta?: BoolFilter<"Opcao"> | boolean
    questaoId?: IntFilter<"Opcao"> | number
    questao?: XOR<QuestaoRelationFilter, QuestaoWhereInput>
  }

  export type OpcaoOrderByWithRelationInput = {
    id?: SortOrder
    texto?: SortOrder
    correta?: SortOrder
    questaoId?: SortOrder
    questao?: QuestaoOrderByWithRelationInput
  }

  export type OpcaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OpcaoWhereInput | OpcaoWhereInput[]
    OR?: OpcaoWhereInput[]
    NOT?: OpcaoWhereInput | OpcaoWhereInput[]
    texto?: StringFilter<"Opcao"> | string
    correta?: BoolFilter<"Opcao"> | boolean
    questaoId?: IntFilter<"Opcao"> | number
    questao?: XOR<QuestaoRelationFilter, QuestaoWhereInput>
  }, "id">

  export type OpcaoOrderByWithAggregationInput = {
    id?: SortOrder
    texto?: SortOrder
    correta?: SortOrder
    questaoId?: SortOrder
    _count?: OpcaoCountOrderByAggregateInput
    _avg?: OpcaoAvgOrderByAggregateInput
    _max?: OpcaoMaxOrderByAggregateInput
    _min?: OpcaoMinOrderByAggregateInput
    _sum?: OpcaoSumOrderByAggregateInput
  }

  export type OpcaoScalarWhereWithAggregatesInput = {
    AND?: OpcaoScalarWhereWithAggregatesInput | OpcaoScalarWhereWithAggregatesInput[]
    OR?: OpcaoScalarWhereWithAggregatesInput[]
    NOT?: OpcaoScalarWhereWithAggregatesInput | OpcaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Opcao"> | number
    texto?: StringWithAggregatesFilter<"Opcao"> | string
    correta?: BoolWithAggregatesFilter<"Opcao"> | boolean
    questaoId?: IntWithAggregatesFilter<"Opcao"> | number
  }

  export type QuestaoCreateInput = {
    texto: string
    opcoes?: OpcaoCreateNestedManyWithoutQuestaoInput
  }

  export type QuestaoUncheckedCreateInput = {
    id?: number
    texto: string
    opcoes?: OpcaoUncheckedCreateNestedManyWithoutQuestaoInput
  }

  export type QuestaoUpdateInput = {
    texto?: StringFieldUpdateOperationsInput | string
    opcoes?: OpcaoUpdateManyWithoutQuestaoNestedInput
  }

  export type QuestaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    opcoes?: OpcaoUncheckedUpdateManyWithoutQuestaoNestedInput
  }

  export type QuestaoCreateManyInput = {
    id?: number
    texto: string
  }

  export type QuestaoUpdateManyMutationInput = {
    texto?: StringFieldUpdateOperationsInput | string
  }

  export type QuestaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
  }

  export type OpcaoCreateInput = {
    texto: string
    correta: boolean
    questao: QuestaoCreateNestedOneWithoutOpcoesInput
  }

  export type OpcaoUncheckedCreateInput = {
    id?: number
    texto: string
    correta: boolean
    questaoId: number
  }

  export type OpcaoUpdateInput = {
    texto?: StringFieldUpdateOperationsInput | string
    correta?: BoolFieldUpdateOperationsInput | boolean
    questao?: QuestaoUpdateOneRequiredWithoutOpcoesNestedInput
  }

  export type OpcaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    correta?: BoolFieldUpdateOperationsInput | boolean
    questaoId?: IntFieldUpdateOperationsInput | number
  }

  export type OpcaoCreateManyInput = {
    id?: number
    texto: string
    correta: boolean
    questaoId: number
  }

  export type OpcaoUpdateManyMutationInput = {
    texto?: StringFieldUpdateOperationsInput | string
    correta?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OpcaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    correta?: BoolFieldUpdateOperationsInput | boolean
    questaoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type OpcaoListRelationFilter = {
    every?: OpcaoWhereInput
    some?: OpcaoWhereInput
    none?: OpcaoWhereInput
  }

  export type OpcaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestaoCountOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
  }

  export type QuestaoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type QuestaoMaxOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
  }

  export type QuestaoMinOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
  }

  export type QuestaoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type QuestaoRelationFilter = {
    is?: QuestaoWhereInput
    isNot?: QuestaoWhereInput
  }

  export type OpcaoCountOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
    correta?: SortOrder
    questaoId?: SortOrder
  }

  export type OpcaoAvgOrderByAggregateInput = {
    id?: SortOrder
    questaoId?: SortOrder
  }

  export type OpcaoMaxOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
    correta?: SortOrder
    questaoId?: SortOrder
  }

  export type OpcaoMinOrderByAggregateInput = {
    id?: SortOrder
    texto?: SortOrder
    correta?: SortOrder
    questaoId?: SortOrder
  }

  export type OpcaoSumOrderByAggregateInput = {
    id?: SortOrder
    questaoId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OpcaoCreateNestedManyWithoutQuestaoInput = {
    create?: XOR<OpcaoCreateWithoutQuestaoInput, OpcaoUncheckedCreateWithoutQuestaoInput> | OpcaoCreateWithoutQuestaoInput[] | OpcaoUncheckedCreateWithoutQuestaoInput[]
    connectOrCreate?: OpcaoCreateOrConnectWithoutQuestaoInput | OpcaoCreateOrConnectWithoutQuestaoInput[]
    createMany?: OpcaoCreateManyQuestaoInputEnvelope
    connect?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
  }

  export type OpcaoUncheckedCreateNestedManyWithoutQuestaoInput = {
    create?: XOR<OpcaoCreateWithoutQuestaoInput, OpcaoUncheckedCreateWithoutQuestaoInput> | OpcaoCreateWithoutQuestaoInput[] | OpcaoUncheckedCreateWithoutQuestaoInput[]
    connectOrCreate?: OpcaoCreateOrConnectWithoutQuestaoInput | OpcaoCreateOrConnectWithoutQuestaoInput[]
    createMany?: OpcaoCreateManyQuestaoInputEnvelope
    connect?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type OpcaoUpdateManyWithoutQuestaoNestedInput = {
    create?: XOR<OpcaoCreateWithoutQuestaoInput, OpcaoUncheckedCreateWithoutQuestaoInput> | OpcaoCreateWithoutQuestaoInput[] | OpcaoUncheckedCreateWithoutQuestaoInput[]
    connectOrCreate?: OpcaoCreateOrConnectWithoutQuestaoInput | OpcaoCreateOrConnectWithoutQuestaoInput[]
    upsert?: OpcaoUpsertWithWhereUniqueWithoutQuestaoInput | OpcaoUpsertWithWhereUniqueWithoutQuestaoInput[]
    createMany?: OpcaoCreateManyQuestaoInputEnvelope
    set?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
    disconnect?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
    delete?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
    connect?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
    update?: OpcaoUpdateWithWhereUniqueWithoutQuestaoInput | OpcaoUpdateWithWhereUniqueWithoutQuestaoInput[]
    updateMany?: OpcaoUpdateManyWithWhereWithoutQuestaoInput | OpcaoUpdateManyWithWhereWithoutQuestaoInput[]
    deleteMany?: OpcaoScalarWhereInput | OpcaoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OpcaoUncheckedUpdateManyWithoutQuestaoNestedInput = {
    create?: XOR<OpcaoCreateWithoutQuestaoInput, OpcaoUncheckedCreateWithoutQuestaoInput> | OpcaoCreateWithoutQuestaoInput[] | OpcaoUncheckedCreateWithoutQuestaoInput[]
    connectOrCreate?: OpcaoCreateOrConnectWithoutQuestaoInput | OpcaoCreateOrConnectWithoutQuestaoInput[]
    upsert?: OpcaoUpsertWithWhereUniqueWithoutQuestaoInput | OpcaoUpsertWithWhereUniqueWithoutQuestaoInput[]
    createMany?: OpcaoCreateManyQuestaoInputEnvelope
    set?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
    disconnect?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
    delete?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
    connect?: OpcaoWhereUniqueInput | OpcaoWhereUniqueInput[]
    update?: OpcaoUpdateWithWhereUniqueWithoutQuestaoInput | OpcaoUpdateWithWhereUniqueWithoutQuestaoInput[]
    updateMany?: OpcaoUpdateManyWithWhereWithoutQuestaoInput | OpcaoUpdateManyWithWhereWithoutQuestaoInput[]
    deleteMany?: OpcaoScalarWhereInput | OpcaoScalarWhereInput[]
  }

  export type QuestaoCreateNestedOneWithoutOpcoesInput = {
    create?: XOR<QuestaoCreateWithoutOpcoesInput, QuestaoUncheckedCreateWithoutOpcoesInput>
    connectOrCreate?: QuestaoCreateOrConnectWithoutOpcoesInput
    connect?: QuestaoWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type QuestaoUpdateOneRequiredWithoutOpcoesNestedInput = {
    create?: XOR<QuestaoCreateWithoutOpcoesInput, QuestaoUncheckedCreateWithoutOpcoesInput>
    connectOrCreate?: QuestaoCreateOrConnectWithoutOpcoesInput
    upsert?: QuestaoUpsertWithoutOpcoesInput
    connect?: QuestaoWhereUniqueInput
    update?: XOR<XOR<QuestaoUpdateToOneWithWhereWithoutOpcoesInput, QuestaoUpdateWithoutOpcoesInput>, QuestaoUncheckedUpdateWithoutOpcoesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type OpcaoCreateWithoutQuestaoInput = {
    texto: string
    correta: boolean
  }

  export type OpcaoUncheckedCreateWithoutQuestaoInput = {
    id?: number
    texto: string
    correta: boolean
  }

  export type OpcaoCreateOrConnectWithoutQuestaoInput = {
    where: OpcaoWhereUniqueInput
    create: XOR<OpcaoCreateWithoutQuestaoInput, OpcaoUncheckedCreateWithoutQuestaoInput>
  }

  export type OpcaoCreateManyQuestaoInputEnvelope = {
    data: OpcaoCreateManyQuestaoInput | OpcaoCreateManyQuestaoInput[]
    skipDuplicates?: boolean
  }

  export type OpcaoUpsertWithWhereUniqueWithoutQuestaoInput = {
    where: OpcaoWhereUniqueInput
    update: XOR<OpcaoUpdateWithoutQuestaoInput, OpcaoUncheckedUpdateWithoutQuestaoInput>
    create: XOR<OpcaoCreateWithoutQuestaoInput, OpcaoUncheckedCreateWithoutQuestaoInput>
  }

  export type OpcaoUpdateWithWhereUniqueWithoutQuestaoInput = {
    where: OpcaoWhereUniqueInput
    data: XOR<OpcaoUpdateWithoutQuestaoInput, OpcaoUncheckedUpdateWithoutQuestaoInput>
  }

  export type OpcaoUpdateManyWithWhereWithoutQuestaoInput = {
    where: OpcaoScalarWhereInput
    data: XOR<OpcaoUpdateManyMutationInput, OpcaoUncheckedUpdateManyWithoutQuestaoInput>
  }

  export type OpcaoScalarWhereInput = {
    AND?: OpcaoScalarWhereInput | OpcaoScalarWhereInput[]
    OR?: OpcaoScalarWhereInput[]
    NOT?: OpcaoScalarWhereInput | OpcaoScalarWhereInput[]
    id?: IntFilter<"Opcao"> | number
    texto?: StringFilter<"Opcao"> | string
    correta?: BoolFilter<"Opcao"> | boolean
    questaoId?: IntFilter<"Opcao"> | number
  }

  export type QuestaoCreateWithoutOpcoesInput = {
    texto: string
  }

  export type QuestaoUncheckedCreateWithoutOpcoesInput = {
    id?: number
    texto: string
  }

  export type QuestaoCreateOrConnectWithoutOpcoesInput = {
    where: QuestaoWhereUniqueInput
    create: XOR<QuestaoCreateWithoutOpcoesInput, QuestaoUncheckedCreateWithoutOpcoesInput>
  }

  export type QuestaoUpsertWithoutOpcoesInput = {
    update: XOR<QuestaoUpdateWithoutOpcoesInput, QuestaoUncheckedUpdateWithoutOpcoesInput>
    create: XOR<QuestaoCreateWithoutOpcoesInput, QuestaoUncheckedCreateWithoutOpcoesInput>
    where?: QuestaoWhereInput
  }

  export type QuestaoUpdateToOneWithWhereWithoutOpcoesInput = {
    where?: QuestaoWhereInput
    data: XOR<QuestaoUpdateWithoutOpcoesInput, QuestaoUncheckedUpdateWithoutOpcoesInput>
  }

  export type QuestaoUpdateWithoutOpcoesInput = {
    texto?: StringFieldUpdateOperationsInput | string
  }

  export type QuestaoUncheckedUpdateWithoutOpcoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
  }

  export type OpcaoCreateManyQuestaoInput = {
    id?: number
    texto: string
    correta: boolean
  }

  export type OpcaoUpdateWithoutQuestaoInput = {
    texto?: StringFieldUpdateOperationsInput | string
    correta?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OpcaoUncheckedUpdateWithoutQuestaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    correta?: BoolFieldUpdateOperationsInput | boolean
  }

  export type OpcaoUncheckedUpdateManyWithoutQuestaoInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    correta?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use QuestaoCountOutputTypeDefaultArgs instead
     */
    export type QuestaoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestaoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestaoDefaultArgs instead
     */
    export type QuestaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpcaoDefaultArgs instead
     */
    export type OpcaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpcaoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}